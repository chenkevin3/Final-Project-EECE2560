#include <iostream>
using namespace std;

// Define a Node structure to represent each seat
struct Node {
    int seatNumber;
    Node* next;
};

// Class for the ticket booking system
class TicketBookingSystem {
private:
    Node* head; // Head of the singly linked list

public:
    // Constructor
    TicketBookingSystem() {
        head = nullptr; // Initialize the head to nullptr, indicating an empty list
    }

    // Function to book a seat (add a node to the end of the list)
    void bookSeat(int seatNumber) {
        Node* newNode = new Node();
        newNode->seatNumber = seatNumber;
        newNode->next = nullptr;

        // If the list is empty, the new node becomes the head
        if (head == nullptr) {
            head = newNode;
        } else {
            // Otherwise, find the end of the list and add the new node there
            Node* current = head;
            while (current->next != nullptr) {
                current = current->next;
            }
            current->next = newNode;
        }
        cout << "Seat " << seatNumber << " has been booked." << endl;
    }

    // Function to cancel a seat (remove a node from the list)
    void cancelSeat(int seatNumber) {
        // If the list is empty, there's nothing to cancel
        if (head == nullptr) {
            cout << "No seats are booked yet." << endl;
            return;
        }

        // If the seat to be canceled is the head of the list
        if (head->seatNumber == seatNumber) {
            Node* temp = head;
            head = head->next;
            delete temp;
            cout << "Seat " << seatNumber << " has been canceled." << endl;
            return;
        }

        // Traverse the list to find the seat to cancel
        Node* current = head;
        Node* previous = nullptr;
        while (current != nullptr && current->seatNumber != seatNumber) {
            previous = current;
            current = current->next;
        }

        // If we find the seat, remove it
        if (current != nullptr) {
            previous->next = current->next;
            delete current;
            cout << "Seat " << seatNumber << " has been canceled." << endl;
        } else {
            // If the seat is not found
            cout << "Seat " << seatNumber << " is not booked." << endl;
        }
    }

    // Function to display all booked seats
    void showAvailableSeats() {
        if (head == nullptr) {
            cout << "No seats are booked yet." << endl;
            return;
        }

        cout << "Available Seats: ";
        Node* current = head;
        while (current != nullptr) {
            cout << "Seat " << current->seatNumber;
            if (current->next != nullptr) {
                cout << " -> ";
            }
            current = current->next;
        }
        cout << " -> NULL" << endl;
    }

    // Destructor to free memory when the program ends
    ~TicketBookingSystem() {
        Node* current = head;
        while (current != nullptr) {
            Node* temp = current;
            current = current->next;
            delete temp;
        }
    }
};

// Main function to run the ticket booking system
int main() {
    TicketBookingSystem system;
    int choice, seatNumber;

    while (true) {
        cout << "\nEvent Ticket Booking System\n";
        cout << "1. Book a Seat\n";
        cout << "2. Cancel a Seat\n";
        cout << "3. Show Available Seats\n";
        cout << "4. Exit\n";
        cout << "Choose an option (1-4): ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter seat number to book: ";
                cin >> seatNumber;
                system.bookSeat(seatNumber);
                break;
            case 2:
                cout << "Enter seat number to cancel: ";
                cin >> seatNumber;
                system.cancelSeat(seatNumber);
                break;
            case 3:
                system.showAvailableSeats();
                break;
            case 4:
                cout << "Exiting the system. Goodbye!" << endl;
                return 0;
            default:
                cout << "Invalid option. Please choose a number between 1 and 4." << endl;
        }
    }
}
